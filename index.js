require('dot-env');
const moment = require('moment');
const {Composer} = require('micro-bot');
const Extra = require('telegraf/extra');
const Markup = require('telegraf/markup');
const MongoClient = require('mongodb').MongoClient; //123

const dbClient = new MongoClient(process.env.MONGODB_URI, {useNewUrlParser: true})

const moonCalc = require('./moonCalc');

const sendLocationKeyboard = Extra.markup(markup => markup.keyboard([markup.locationRequestButton('üìç –û–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!')]).oneTime().resize())
const removeKb = Markup.removeKeyboard().extra()

const app = new Composer();

app.start((ctx) => ctx.reply(
  '–ü—Ä–∏–≤–µ—Ç. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏ —è —Å–∫–∞–∂—É —Ç–µ–±–µ –∫–∞–∫–æ–π –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–µ–π—á–∞—Å –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å.' +
  '–Ø –∑–∞–ø–æ–º–Ω—é —ç—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö –ª—É–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞',
  sendLocationKeyboard
  )
);
app.help((ctx) => ctx.reply(
  '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏ —è —Å–∫–∞–∂—É —Ç–µ–±–µ –∫–∞–∫–æ–π –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–µ–π—á–∞—Å –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å', sendLocationKeyboard
  )
);
app.command('location', async ctx => {
  return ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–ª—è —Ç–µ–±—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É', sendLocationKeyboard)
})

app.command('day', async ({db, message, reply, replyWithMarkdown}) => {
  try {
    const chat = await db.collection('chats').findOne({chatId: message.chat.id})
    if (!chat) return reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞', sendLocationKeyboard)

    const {coordinates: [lat, lon]} = chat;
    const moonDay = moonCalc.calculateMoonDayFor(moment(), {lat, lon});
    const reportMessage = createReportMessage({moonDay})
    return replyWithMarkdown(reportMessage)
  } catch (err) {
    console.error(err)
    reply('–°–æ—Ä—è–Ω. –í–æ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –í–µ—Ç–∞–ª—É')
  }
})

app.on('location', async ctx => {
  try {
    const {message: {location: {latitude, longitude}}} = ctx
    const chatsCollection = ctx.db.collection('chats')

    if (!latitude || !longitude) return ctx.reply('–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å —Å–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')

    await chatsCollection.updateOne(
      {chatId: ctx.message.chat.id},
      {$set: {chatId: ctx.message.chat.id, coordinates: [latitude, longitude]}},
      {upsert: true}
    )

    await ctx.reply(`–ë–ª–∞–≥–æ–¥–∞—Ä—é. –ó–∞–ø–æ–º–Ω–∏–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n–î–æ–ª–≥–æ—Ç–∞: ${longitude}\n–®–∏—Ä–æ—Ç–∞: ${latitude}\n`)

    const moonDay = moonCalc.calculateMoonDayFor(moment(), {lat:latitude, lon: longitude});
    const reportMessage = createReportMessage({moonDay})
    return ctx.replyWithMarkdown(reportMessage, removeKb)
  } catch (err) {
    console.error(err)
    ctx.reply('–°–æ—Ä—è–Ω. –í–æ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –í–µ—Ç–∞–ª—É', removeKb)
  }
})

module.exports = {
  initialize: async bot => {
    await dbClient.connect();
    bot.context.db = dbClient.db();
    console.log(`DB ${bot.context.db.databaseName} is initialized`)
  },
  botHandler: app
}


function createReportMessage({moonDay}) {
  if (!moonDay) return '–ù–µ –º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å. –°—Ç—Ä–∞–Ω–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞. –£—á—Ç–∏ —ç—Ç–æ'

  const {dayNumber, dayStart, dayEnd} = moonDay;
  let reportMessage =
    `–¢–µ–∫—É—â–∏–π –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å: *${dayNumber}*
–î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è: _${moment(dayStart).format('ddd D MMM HH:mm:ss')}_
–î–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è: _${moment(dayEnd).format('ddd D MMM HH:mm:ss')}_
–ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ—Ä–µ–∑: _${moment(dayEnd).fromNow()}_
`
  return reportMessage
}
